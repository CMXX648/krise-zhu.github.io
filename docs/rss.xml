<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>KriseZhu</title><link>https://CMXX648.github.io/krise-zhu.github.io</link><description>学习博客</description><copyright>KriseZhu</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/90679613?v=4</url><title>avatar</title><link>https://CMXX648.github.io/krise-zhu.github.io</link></image><lastBuildDate>Mon, 08 Jul 2024 16:07:40 +0000</lastBuildDate><managingEditor>KriseZhu</managingEditor><ttl>60</ttl><webMaster>KriseZhu</webMaster><item><title>线程的同步与互斥</title><link>https://CMXX648.github.io/krise-zhu.github.io/post/xian-cheng-de-tong-bu-yu-hu-chi.html</link><description>```C++&#13;
#include&lt;iostream&gt;&#13;
#include&lt;Windows.h&gt;&#13;
#include&lt;vector&gt;&#13;
#include&lt;set&gt;&#13;
using namespace std;&#13;
&#13;
#define MAX_THREAD_NUM 20&#13;
#define MAX_BUFFER_NUM 50&#13;
#define MAX_PRODUCE_NUM 200&#13;
&#13;
int thread_num;//线程数量&#13;
int n_buffer;//缓冲区数量&#13;
int n_produce;//产品数量&#13;
int Buffer[MAX_BUFFER_NUM];//缓冲区&#13;
HANDLE thread_list[MAX_THREAD_NUM];//线程列表&#13;
HANDLE empty_semaphore;//生产者和消费者同步&#13;
HANDLE p_mutex;//生产者互斥&#13;
HANDLE syn_semaphore[MAX_PRODUCE_NUM];//消费者和生产者同步&#13;
CRITICAL_SECTION pc_cirtical[MAX_BUFFER_NUM];//消费者互斥&#13;
&#13;
//线程信息&#13;
class Thread_Info{&#13;
public:&#13;
	int thread_id;//id&#13;
	char kind;//种类&#13;
	double delay;//线程响应延迟&#13;
	vector&lt;int&gt; request;//请求队列&#13;
	int n_request;//请求数量&#13;
};&#13;
&#13;
vector&lt;Thread_Info&gt; thread_info;//线程信息数组&#13;
set&lt;int&gt; t_set;//统计实际产品数量&#13;
&#13;
void PriBuffer(){&#13;
	cout &lt;&lt; endl &lt;&lt; '********************Buffer********************' &lt;&lt; endl &lt;&lt; endl;&#13;
	for (int i = 0; i &lt; n_buffer; i++){&#13;
		cout &lt;&lt; '[' &lt;&lt; i &lt;&lt; ']: ' &lt;&lt; Buffer[i]&lt;&lt;'      ';&#13;
		if ((i+1) % 5 == 0){&#13;
			cout &lt;&lt; endl;&#13;
		}&#13;
	}&#13;
	cout &lt;&lt; endl &lt;&lt; '********************Buffer********************' &lt;&lt; endl &lt;&lt; endl;&#13;
}&#13;
&#13;
int FindProducePosition(){&#13;
	for (int i = 0; i &lt; n_buffer; i++){&#13;
		if (Buffer[i] == -1) { &#13;
			Buffer[i] = -2;//标记有内容		&#13;
			return i;&#13;
		}&#13;
	}&#13;
}&#13;
&#13;
int FindBufferPosition(int product){&#13;
	for (int i = 0; i &lt; n_buffer; i++){&#13;
		if (Buffer[i] == product) return i;&#13;
	}&#13;
}&#13;
&#13;
//生产者&#13;
void Produce(void *p){&#13;
	int thread_id = ((Thread_Info*)p)-&gt;thread_id;&#13;
	char kind = ((Thread_Info*)p)-&gt;kind;&#13;
	double delay = ((Thread_Info*)p)-&gt;delay;&#13;
	int n_rerquest = ((Thread_Info*)p)-&gt;n_request;&#13;
	vector&lt;int&gt; request = ((Thread_Info*)p)-&gt;request;&#13;
	Sleep(delay);//休眠&#13;
	cout &lt;&lt; '生产者 ' &lt;&lt; thread_id &lt;&lt; ' 开始生产' &lt;&lt; endl;&#13;
&#13;
	for (int i = 0; i &lt; n_rerquest; i++){&#13;
		WaitForSingleObject(empty_semaphore, -1);//不为空执行，为空阻塞&#13;
&#13;
		WaitForSingleObject(p_mutex, -1);//没有其他生产者则执行&#13;
		int ProducePos = FindProducePosition();&#13;
		&#13;
&#13;
		//以下代码可异步 原因：在分配位置过程中对数组标记&#13;
		cout &lt;&lt; '生产者 ' &lt;&lt; thread_id &lt;&lt; ' 开始生产产品: ' &lt;&lt; request.at(i) &lt;&lt; endl;&#13;
		Buffer[ProducePos] = request.at(i);&#13;
		cout &lt;&lt; '生产者 ' &lt;&lt; thread_id &lt;&lt; ' 生产完成产品: ' &lt;&lt; request.at(i) &lt;&lt; endl;&#13;
		cout &lt;&lt; 'Buffer[' &lt;&lt; ProducePos &lt;&lt; '] : ' &lt;&lt; request.at(i) &lt;&lt; endl;&#13;
		PriBuffer();//输出结果&#13;
		ReleaseMutex(p_mutex);//之所以放在这里是样问cout可能被拆分&#13;
		ReleaseSemaphore(syn_semaphore[request.at(i)], 1, NULL);&#13;
	}&#13;
}&#13;
&#13;
//消费者&#13;
void Consume(void *p){&#13;
	DWORD wait_for_semaphore;&#13;
	int thread_id = ((Thread_Info*)p)-&gt;thread_id;&#13;
	char kind = ((Thread_Info*)p)-&gt;kind;&#13;
	double delay = ((Thread_Info*)p)-&gt;delay;&#13;
	int n_rerquest = ((Thread_Info*)p)-&gt;n_request;&#13;
	vector&lt;int&gt; request = ((Thread_Info*)p)-&gt;request;&#13;
	Sleep(delay);//休眠&#13;
&#13;
	for (int i = 0; i &lt; n_rerquest; i++){&#13;
		wait_for_semaphore = WaitForSingleObject(syn_semaphore[request.at(i)], -1);//产品存在则消费&#13;
		cout &lt;&lt; '消费者 ' &lt;&lt; thread_id &lt;&lt; ' 请求消费产品 ' &lt;&lt; request.at(i) &lt;&lt; endl;&#13;
		int ProductPos = FindBufferPosition(request.at(i));//找到产品位置&#13;
		EnterCriticalSection(&amp;pc_cirtical[request.at(i)]);&#13;
		cout &lt;&lt; '消费者 ' &lt;&lt; thread_id &lt;&lt; ' 开始消费产品 ' &lt;&lt; request.at(i) &lt;&lt; endl;&#13;
		Buffer[ProductPos] = -1;&#13;
		cout &lt;&lt; '消费者 ' &lt;&lt; thread_id &lt;&lt; ' 消费完成产品 ' &lt;&lt; request.at(i) &lt;&lt; endl;&#13;
		PriBuffer();//输出结果&#13;
		ReleaseSemaphore(empty_semaphore, 1, NULL);&#13;
		LeaveCriticalSection(&amp;pc_cirtical[request.at(i)]);&#13;
	}&#13;
}&#13;
&#13;
int main(){&#13;
&#13;
	cout &lt;&lt; '请输入线程数量: ';&#13;
	cin &gt;&gt; thread_num;&#13;
	cout &lt;&lt; '请输入缓冲区数量: ';&#13;
	cin &gt;&gt; n_buffer;&#13;
	cout &lt;&lt; '请输入线程信息 (例：p 100 1 2 3) p.c为类型 数字为延迟和产品id' &lt;&lt; endl;&#13;
	cout &lt;&lt; endl &lt;&lt; '********************************************' &lt;&lt; endl &lt;&lt; endl;&#13;
&#13;
	for (int i = 0; i &lt; MAX_BUFFER_NUM; i++){&#13;
		Buffer[i] = -1;&#13;
	}&#13;
&#13;
	for (int i = 0; i &lt; thread_num; i++){&#13;
		Thread_Info t_thread_info;&#13;
		cout &lt;&lt; '线程 ' &lt;&lt; i &lt;&lt; ' :';&#13;
		cin &gt;&gt; t_thread_info.kind;//输入种类&#13;
		cin &gt;&gt; t_thread_info.delay;//输入延迟&#13;
		t_thread_info.thread_id = i;//初始化线程id&#13;
		int t_num;&#13;
		while (cin &gt;&gt; t_num){&#13;
			&#13;
			t_thread_info.request.push_back(t_num);&#13;
			if (t_thread_info.kind == 'p') t_set.insert(t_num); &#13;
			t_thread_info.n_request++;&#13;
			if (cin.get() == '\n') break;&#13;
		}&#13;
		thread_info.push_back(t_thread_info);&#13;
	}&#13;
&#13;
	n_produce = t_set.size();&#13;
	empty_semaphore = CreateSemaphore(NULL, n_buffer, n_buffer, (LPCWSTR)'semaphore_for_empty');//初始化同步信号量&#13;
	p_mutex = CreateMutex(NULL, FALSE, (LPCWSTR)'mutex_for_update');//初始化互斥变量&#13;
	for (int i = 0; i &lt; n_produce; i++){&#13;
		string lp = 'semaphore_for_prodece_';&#13;
		int t = i;&#13;
		while (t){&#13;
			char ch = (char)(t % 10);&#13;
			lp += ch;&#13;
			t /= 10;&#13;
		}&#13;
		syn_semaphore[i] = CreateSemaphore(NULL, 0, MAX_PRODUCE_NUM, (LPCWSTR)lp.c_str());&#13;
	}&#13;
	for (int i = 0; i &lt; MAX_BUFFER_NUM; i++){&#13;
		InitializeCriticalSection(&amp;(pc_cirtical[i]));//初始化临界量&#13;
	}&#13;
&#13;
	cout &lt;&lt; endl &lt;&lt; '********************************************' &lt;&lt; endl &lt;&lt; endl;;&#13;
	cout &lt;&lt; '********************线程开始执行********************' &lt;&lt; endl;&#13;
	for (int i = 0; i &lt; thread_num; i++){&#13;
		if (thread_info.at(i).kind == 'p')&#13;
			thread_list[i] = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)(Produce), &amp;thread_info.at(i), 0, NULL);&#13;
		else&#13;
			thread_list[i] = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)(Consume), &amp;thread_info.at(i), 0, NULL);&#13;
	}&#13;
&#13;
	WaitForMultipleObjects(thread_num, thread_list, TRUE, -1);&#13;
	cout &lt;&lt; endl &lt;&lt; '********************线程执行结束********************' &lt;&lt; endl&lt;&lt;endl;&#13;
	cout &lt;&lt; '完成!' &lt;&lt; endl;&#13;
	return 0;&#13;
}&#13;
```&#13;
。</description><guid isPermaLink="true">https://CMXX648.github.io/krise-zhu.github.io/post/xian-cheng-de-tong-bu-yu-hu-chi.html</guid><pubDate>Mon, 08 Jul 2024 11:32:48 +0000</pubDate></item></channel></rss>